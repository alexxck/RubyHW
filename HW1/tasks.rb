# frozen_string_literal: true

def line
  puts '-----------------------------------------------------------------------'
end

line
p '1) Дан целочисленный массив. Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными.'
p a = [8, 1, 2, 4, 5, 2, 1, 6, 11]
p a.select.with_index { |_, index| index.even? } + a.select.with_index { |_, index| index.odd? }
line
p '2) Дан целочисленный массив. Необходимо вывести вначале его элементы с нечетными индексами, а затем - четными.'
p a = [1, 2, 4, 5, 2, 1, 6, 11]
p a.select.with_index { |_, index| index.odd? } + a.select.with_index { |_, index| index.even? }
line
p '3) Дан целочисленный массив. Вывести номер первого из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].'
p arr = [22, 23, 24, 25]
p arr.index(arr.select { |num| arr[0] < num && num < arr[-1] }.first) || []
line
p '4) Дан целочисленный массив. Вывести номер последнего из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].'
p arr = [22, 23, 24, 25]
p arr.index(arr.select { |num| arr[0] < num && num < arr[-1] }.last) || []
line
p '5) Дан целочисленный массив. Преобразовать его, прибавив к четным числам первый элемент. Первый и последний элементы массива не изменять.'
p arr = [400, 13, 12, 23, 24, 25, 26]
p arr.find_all(&:even?)
p arr[1..-2].map { |elem| elem + arr[0] }
line
p '6) Дан целочисленный массив. Преобразовать его, прибавив к четным числам последний элемент. Первый и последний элементы массива не изменять.'
p arr = [400, 13, 12, 23, 24, 25, 1000]
p arr.find_all(&:even?)
p arr[1..-2].map { |elem| elem + arr[-1] }
line
p '7) Дан целочисленный массив. Преобразовать его, прибавив к нечетным числам последний элемент. Первый и последний элементы массива не изменять.'
p arr = [400, 13, 12, 23, 24, 25, 1000]
p arr.find_all(&:odd?)
p arr[1..-2].map { |elem| elem + arr[-1] }
line
p '8) Дан целочисленный массив. Преобразовать его, прибавив к нечетным числам первый элемент. Первый и последний элементы массива не изменять.'
p arr = [400, 13, 12, 23, 24, 25, 1000]
p arr.find_all(&:odd?)
p arr[1..-2].map { |elem| elem + arr[0] }
line
p '9) Дан целочисленный массив. Заменить все положительные элементы на значение минимального.'
p arr = [2, -10, 3, 4, 5, 6, -20]
p arr.find_all(&:positive?).map { arr.min }
line
p '10) Дан целочисленный массив. Заменить все положительные элементы на значение максимального.'
p arr = [2, -10, 3, 4, 5, 100, -20]
p max = arr.max
p arr.map { |el| el.positive? ? max : el }
line
p '11) Дан целочисленный массив. Заменить все отрицательные элементы на значение минимального.'
p arr = [2, -10, 3, 4, 5, 100, -20]
p max = arr.min
p arr.map { |el| el.negative? ? arr.min : el }
line
p '12) Дан целочисленный массив. Заменить все отрицательные элементы на значение максимального.'
p arr = [2, -10, 3, 4, 5, 100, -20]
p max = arr.max
p arr.map { |el| el.negative? ? arr.min : el }
line
p '13) Дан целочисленный массив. Осуществить циклический сдвиг элементов массива влево на одну позицию.'
p arr = [2, 3, 4, 5]
p arr.rotate(1)
line
p '14) Дан целочисленный массив. Осуществить циклический сдвиг элементов массива вправо на одну позицию.'
p arr = [2, 3, 4, 5]
p [arr[-1]] + arr[0..-2]
line
p '17) Дан целочисленный массив. Найти количество его локальных максимумов.'
p arr = [23, 105, 21, 1, 2, 2, 55, 111]
p((1..arr.size - 2).to_a.select { |i| (arr[i] > arr[i - 1]) && (arr[i] > arr[i + 1]) }.size)
line
p '18) Дан целочисленный массив. Найти количество его локальных минимумов.'
arr = [23, 105, 21, 1, 2, 2, 55, 111]
p((1..arr.size - 2).to_a.select { |i| (arr[i] < arr[i - 1]) && (arr[i] < arr[i + 1]) }.size)
line
p '23) Дано вещественное число R и массив вещественных чисел. Найти элемент массива, который наиболее близок к данному числу.'
R = 20.0
arr = [3.1, 7.2, 10.3, 15.5, 18, 24.5]
arr = arr.sort
b = arr.select { |i| i < R }
c = arr.select { |i| i > R }
d = b.max
e = c.min
if (R - d) > (e - R)
  puts e
else
  puts d
end
line
p '24) Дано вещественное число R и массив вещественных чисел. Найти элемент массива, который наименее близок к данному числу.'
R = 10
arr = [4, 5, 9, 12, 24.5]
arr = arr.sort
b = arr.select { |i| i < R }
c = arr.select { |i| i > R }
d = b.min
e = c.max
if (R - d) > (e - R)
  puts e
else
  puts d
end
p '25) Дан целочисленный массив. Преобразовать его, вставив перед каждым положительным элементом нулевой элемент.'
p arr = [1, -1, 2, 3, 4, 5, -5,  32, 44, 55, -100, 100]
puts
arr.map! do |x|
  if x.positive?
    [0, x]
  else
    x
  end
end
print arr.flatten
line
p '26) Дан целочисленный массив. Преобразовать его, вставив перед каждым отрицательным элементом нулевой элемент.'
p arr = [1, -1, 2, 3, 4, 5, -5,  32, 44, 55, -100, 100]
arr.map! do |x|
  if x.negative?
    [0, x]
  else
    x
  end
end
p arr.flatten
line
p '27) Дан целочисленный массив. Преобразовать его, вставив после каждого положительного элемента нулевой элемент.'
p arr = [1, 2, 5, -2, 5, -12, 11]
arr.map! do |x|
  if x.positive?
    [x, 0]
  else
    x
  end
end
p arr.flatten
line
p '28) Дан целочисленный массив. Преобразовать его, вставив после каждого отрицательного элемента нулевой элемент.'
p arr = [1, 2, 5, -2, 5, -12, 11]
arr.map! do |x|
  if x.negative?
    [x, 0]
  else
    x
  end
end
p arr.flatten
line
p '29) Дан целочисленный массив. Упорядочить его по возрастанию.'
p arr = [2, 123, 4, 6, -12, 21]
p arr.sort
line
p '30) Дан целочисленный массив. Упорядочить его по убыванию.'
p arr = [2, 123, 4, 6, -12, 21]
p arr.sort { |x, y| y <=> x }
line
p '31) Дан целочисленный массив. Вывести индексы массива в том порядке, в котором соответствующие им элементы образуют убывающую последовательность.'
p arr = [1, 2, 3, 5, 4, 2, 3, 4]
p (0...arr.size).sort_by { |i| arr[i] }.reverse
line
p '32) Дан целочисленный массив. Вывести индексы массива в том порядке, в котором соответствующие им элементы образуют возрастающую последовательность.'
p arr = [1, 2, 5, 77, 21, 6]
p(0...arr.size).sort_by { |i| arr[i] }
line
p '33) Дан целочисленный массив. Найти индекс минимального элемента.'
p arr = [2, 1, 4, 5]
p arr.index(arr.min)
line
p '34) Дан целочисленный массив. Найти индекс максимального элемента.'
p arr = [2, 1, 4, 5]
p arr.index(arr.max)
line
p '35) Дан целочисленный массив. Найти индекс первого минимального элемента.'
p arr = [2, 1, 4, 5]
p arr.index(arr.min)
line
p '36) Дан целочисленный массив. Найти индекс первого максимального элемента.'
p arr = [2, 1, 4, 5]
p arr.index(arr.max)
line
p '37) Дан целочисленный массив. Найти индекс последнего минимального элемента.'
p arr = [11, 2, 4, 10, 12, 3, 2, 13]
p index_of_minimal_value_in_array = arr.rindex(arr.min)
line
p '38) Дан целочисленный массив. Найти индекс последнего максимального элемента.'
p arr = [111, 1211, 4, 10, 1211, 3, 2, 13]
p index_of_minimal_value_in_array = arr.rindex(a.max)
line
p '39) Дан целочисленный массив. Найти количество минимальных элементов.'
p arr = [111, 1211, 4, 10, 1211, 3, 2, 2, 2, 2, 13]
p index_of_minimal_value_in_array = arr.select { |i| i == arr.min }.size
line
p '40) Дан целочисленный массив. Найти количество максимальных элементов.'
p arr = [111, 1211, 4, 10, 1211, 3, 2000, 2, 2, 2, 13]
p index_of_minimal_value_in_array = arr.select { |i| i == arr.max }.size
line
p '41) Дан целочисленный массив. Найти минимальный четный элемент.'
p arr = [-1, 5, -444, 6, 1, 8, -3, 1, -145]
p arr.select(&:even?).min
line
p '42) Дан целочисленный массив. Найти минимальный нечетный элемент.'
p arr = [-1, 5, -444, 6, 1, 8, -3, 1, -145]
p arr.select(&:odd?).min
line
p '43) Дан целочисленный массив. Найти максимальный четный элемент.'
p arr = [-1, 5, -444, 6, 1, 8, -3, 1, -145, 200]
p arr.select(&:even?).max
line
p '44) Дан целочисленный массив. Найти максимальный нечетный элемент.'
p arr = [-1, 500, -444, 6, 1, 8, -3, 1, -145, 201]
p arr.select(&:odd?).max
line
p '45) Дан целочисленный массив. Найти минимальный положительный элемент.'
p arr = [-1, 500, -444, 6, 8, -3, -145, 201]
p arr.select { |n| n >= 0 }.min
line
p '46)Дан целочисленный массив. Найти максимальный отрицательный элемент.'
p arr = [1, 500, -444, 6, 8, -3000, -145, 201]
p arr.select(&:negative?).max
line
p '47) Дан целочисленный массив и интервал a..b. Найти минимальный из элементов в этом интервале.'
p arr = [1, 2, 3, 4, 5]
a = 2
b = 4
p arr[a..b].min
line
p '48) Дан целочисленный массив и интервал a..b. Найти максимальный из элементов в этом интервале.'
p arr = [1, 2, 3, 45, 4, 6]
a = 3
b = 5
p arr[a..b].max
line
p '49) Дан целочисленный массив. Найти количество элементов, расположенных перед первым минимальным.'
p arr = [6, 6, 6, 4, 5, 1, 4, 1, 5, 4, 4, 4, 4, 6]
p arr.index(arr.min)
line
p '50) Дан целочисленный массив. Найти количество элементов, расположенных перед первым максимальным.'
p arr = [6, 6, 44, 5, 1, 4, 1, 5, 4, 4, 4, 4, 6]
p arr.index(arr.max)
line
p '51) Дан целочисленный массив. Найти количество элементов, расположенных после первого максимального.'
p arr = [1, 2, 3, 4, 1, 2]
p arr[arr.index(arr.max) + 1..-1].size
line
p '52) Дан целочисленный массив. Найти количество элементов, расположенных после первого минимального .'
p arr = [9, 1, 2, 3, 4, 1, 9]
p arr[arr.index(arr.min) + 1..-1].size
line
p '53) Дан целочисленный массив. Найти количество элементов, расположенных перед последним максимальным.'
p arr = [1, 6, 2, 4, 1, 6]
p arr.rindex(arr.max)
line
p '54) Дан целочисленный массив. Найти количество элементов, расположенных перед последним минимальным.'
p arr = [6, 1, 2, 4, 1, 5, 4, 4, 4, 4, 4]
p arr.rindex(arr.reverse.min)
line
p '55) Дан целочисленный массив. Найти количество элементов, расположенных после последнего максимального.'
p arr = [1, 6, 4, 5, 23, 7, 8, 2, 144, 4, 5, 5]
p arr.reverse.index(arr.max)
line
p '56) Дан целочисленный массив. Найти количество элементов, расположенных после последнего минимального .'
p arr = [6, 4, 5, 1, 23, 7, 8, 2, 1, 4, 4, 4]
p arr.reverse.index(arr.min)
line
p '59) Дан целочисленный массив. Найти количество элементов, между первым и последним минимальным.'
p arr = [6, 4, 5, 1, 23, 7, 8, 2, 1, 4, 4, 4]
a = arr.index(arr.min)
b = arr.rindex(arr.min)
p arr[a + 1...b].size
line
p '60) Дан целочисленный массив. Найти количество элементов, между первым и последним максимальным.'
p arr = [1, 4, 5, 10, 7, 8, 2, 10, 4, 4, 10]
a = arr.index(arr.max)
b = arr.rindex(arr.max)
p arr[a + 1...b].size
line
p '61) Дан целочисленный массив. Найти два наибольших элемента.'
p arr = [1, 4, -7, 3, 9, -7]
p arr.sort.uniq.last 2
line
p '62) Дан целочисленный массив. Найти два наименьших элемента.'
p arr = [1, 4, -7, 3, 9, -7]
p arr.sort.uniq.first 2
line
p '65) Дан целочисленный массив. Вывести вначале все его четные элементы, а затем - нечетные.'
p arr = [8, 1, 2, 4, 5, 2, 1, 6, 11]
print arr.select(&:even?) + arr.select(&:odd?)
line
p '66) Дан целочисленный массив. Вывести вначале все его нечетные элементы, а затем - четные.'
p arr = [8, 1, 2, 4, 5, 2, 1, 6, 11]
p arr.select(&:odd?) + arr.select(&:even?)
line
p '77) Дано целое число. Найти сумму его цифр.'
p arr = 5551.digits
p arr.inject(:+)
line
p '78) Дано целое число. Найти произведение его цифр.'
p arr = 122.digits
p arr.inject(:*)
line
p '86) Дан целочисленный массив. Найти среднее арифметическое его элементов.'
p arr = [10, 6, 4, 2, 8, 7]
p arr.inject { |sum, n| sum + n }.to_f / arr.size
line
p '87) Дан целочисленный массив. Найти все четные элементы.'
p arr = [1, 2, 3, 4, 5, 6]
arr.select
p arr.select(&:even?)
line
p '88) Дан целочисленный массив. Найти количество четных элементов.'
p arr = [1, 2, 3, 4, 5, 6, 8, 6]
p arr.select(&:even?).size
line
p '89) Дан целочисленный массив. Найти все нечетные элементы.'
p arr = [1, 2, 3, 4, 5, 6]
p arr.select(&:odd?)
line
p '90) Дан целочисленный массив. Найти количество нечетных элементов.'
p arr = [1, 2, 3, 4, 5, 6]
arr.select
p arr.select(&:odd?).size
line
